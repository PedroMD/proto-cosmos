syntax = "proto3";

package sf.cosmos.type.v1;

option go_package = "github.com/figment-networks/proto-cosmos/pb/sf/cosmos/type/v1;pbcosmos";

import "google/protobuf/descriptor.proto";
import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

message Block {
  Header header = 1 [(gogoproto.nullable) = false];
  EvidenceList evidence = 2 [(gogoproto.nullable) = false];
  Commit last_commit = 3;
  ResponseBeginBlock result_begin_block = 4;
  ResponseEndBlock result_end_block = 5;
  repeated TxResult transactions = 7;
  repeated Validator validator_updates = 8;
}

// HeaderOnlyBlock is a standard [Block] structure where all other fields are
// removed so that hydrating that object from a [Block] bytes payload will
// drastically reduce allocated memory required to hold the full block.
//
// This can be used to unpack a [Block] when only the [Header] information
// is required and greatly reduce required memory.
message HeaderOnlyBlock {
  Header header = 1 [(gogoproto.nullable) = false];
}

message EventData {
  Event event = 1;
  HeaderOnlyBlock block = 2;
}

message TransactionData {
  TxResult tx = 1;
  HeaderOnlyBlock block = 2;
}

message Header {
  Consensus version = 1 [(gogoproto.nullable) = false];
  string chain_id = 2 [(gogoproto.customname) = "ChainID"];
  uint64 height = 3;
  Timestamp time = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  BlockID last_block_id = 5 [(gogoproto.nullable) = false];
  bytes last_commit_hash = 6; // hash 256 32 bytes
  bytes data_hash = 7; // hash 256 32 bytes
  bytes validators_hash = 8; // hash 256 32 bytes
  bytes next_validators_hash = 9; // hash 256 32 bytes
  bytes consensus_hash = 10; // hash 256 32 bytes
  bytes app_hash = 11; // determined by application, not a fixed length
  bytes last_results_hash = 12; // hash 256 32 bytes - first block will be results of an empty hash
  bytes evidence_hash = 13; // hash sha256 32 bytes
  bytes proposer_address = 14; // hash 256 20 bytes - this is the first 20 characters of a 32-byte key - SHA256(pubkey)[:20]
  bytes hash = 15;
}

message Consensus {
  option (gogoproto.equal) = true;

  uint64 block = 1;
  uint64 app = 2;
}

message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

message BlockID {
  bytes hash = 1;
  PartSetHeader part_set_header = 2 [(gogoproto.nullable) = false];
}

message PartSetHeader {
  uint32 total = 1;
  bytes hash = 2; // hash 256 32 bytes
}

message EvidenceList {
  repeated Evidence evidence = 1 [(gogoproto.nullable) = false];
}

message Evidence {
  oneof sum {
    DuplicateVoteEvidence duplicate_vote_evidence = 1;
    LightClientAttackEvidence light_client_attack_evidence = 2;
  }
}

message DuplicateVoteEvidence {
  EventVote vote_a = 1;
  EventVote vote_b = 2;
  int64 total_voting_power = 3;
  int64 validator_power = 4;
  Timestamp timestamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

message EventVote {
  SignedMsgType event_vote_type = 1 [json_name = "type"]; // should be present in the enum at the top of this file
  uint64 height = 2; // must be > 0
  int32 round = 3; // must be > 0
  BlockID block_id = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];
  Timestamp timestamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes validator_address = 6; // hash with a length of 20
  int32 validator_index = 7;
  bytes signature = 8; // hash length should be >0 and <64
}

enum SignedMsgType {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  SIGNED_MSG_TYPE_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "UnknownType"];
  // Votes
  SIGNED_MSG_TYPE_PREVOTE = 1 [(gogoproto.enumvalue_customname) = "PrevoteType"];
  SIGNED_MSG_TYPE_PRECOMMIT = 2 [(gogoproto.enumvalue_customname) = "PrecommitType"];
  // Proposals
  SIGNED_MSG_TYPE_PROPOSAL = 32 [(gogoproto.enumvalue_customname) = "ProposalType"];
}

message LightClientAttackEvidence {
  LightBlock conflicting_block = 1;
  int64 common_height = 2;
  repeated Validator byzantine_validators = 3;
  int64 total_voting_power = 4;
  Timestamp timestamp = 5 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
}

message LightBlock {
  SignedHeader signed_header = 1; // cannot be nil
  ValidatorSet validator_set = 2; // cannot be nil
}

message SignedHeader {
  Header header = 1;
  Commit commit = 2;
}

message Commit {
  int64 height = 1; // must be > 0
  int32 round = 2; // must be > 0
  BlockID block_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "BlockID"];
  repeated CommitSig signatures = 4 [(gogoproto.nullable) = false];
}

message CommitSig {
  BlockIDFlag block_id_flag = 1; // must match those in the enum above
  bytes validator_address = 2; // hash 256 20 bytes - this is the first 20 characters of a 32-byte key - SHA256(pubkey)[:20]
  Timestamp timestamp = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  bytes signature = 4; // length should be > 0 and < 64
}

enum BlockIDFlag {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  BLOCK_ID_FLAG_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "BlockIDFlagUnknown"];
  BLOCK_ID_FLAG_ABSENT = 1 [(gogoproto.enumvalue_customname) = "BlockIDFlagAbsent"];
  BLOCK_ID_FLAG_COMMIT = 2 [(gogoproto.enumvalue_customname) = "BlockIDFlagCommit"];
  BLOCK_ID_FLAG_NIL = 3 [(gogoproto.enumvalue_customname) = "BlockIDFlagNil"];
}

message ValidatorSet {
  repeated Validator validators = 1; // cannot be empty or nil
  Validator proposer = 2; // cannot be nil
  int64 total_voting_power = 3;
}

message Validator {
  bytes address = 1;
  PublicKey pub_key = 2 [(gogoproto.nullable) = false]; // must be > 0
  int64 voting_power = 3;
  int64 proposer_priority = 4;
}

message PublicKey {
  option (gogoproto.compare) = true;
  option (gogoproto.equal) = true;

  oneof sum {
    bytes ed25519 = 1;
    bytes secp256k1 = 2;
  }
}

message ResponseBeginBlock {
  repeated Event events = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "events,omitempty"];
}

message Event {
  string event_type = 1 [json_name = "type"];
  repeated EventAttribute attributes = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "attributes,omitempty"];
}

message EventAttribute {
  string key = 1;
  string value = 2;
  bool index = 3; // nondeterministic
}

message ResponseEndBlock {
  repeated ValidatorUpdate validator_updates = 1;
  ConsensusParams consensus_param_updates = 2;
  repeated Event events = 3;
}

message ValidatorUpdate {
  bytes address = 1;
  PublicKey pub_key = 2 [(gogoproto.nullable) = false];
  int64 power = 3;
}

message ConsensusParams {
  BlockParams block = 1 [(gogoproto.nullable) = false];
  EvidenceParams evidence = 2 [(gogoproto.nullable) = false];
  ValidatorParams validator = 3 [(gogoproto.nullable) = false];
  VersionParams version = 4 [(gogoproto.nullable) = false];
}

message BlockParams {
  int64 max_bytes = 1; // Note: must be greater than 0
  int64 max_gas = 2; // Note: must be greater or equal to -1
}

message EvidenceParams {
  int64 max_age_num_blocks = 1;
  Duration max_age_duration = 2 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  int64 max_bytes = 3; // Default is 1048576 or 1MB
}

message Duration {
  int64 seconds = 1;
  int32 nanos = 2;
}

message ValidatorParams {
  option (gogoproto.populate) = true;
  option (gogoproto.equal) = true;

  repeated string pub_key_types = 1;
}

message VersionParams {
  option (gogoproto.populate) = true;
  option (gogoproto.equal) = true;

  uint64 app_version = 1;
}

message TxResult {
  uint64 height = 1;
  uint32 index = 2;
  Tx tx = 3;
  ResponseDeliverTx result = 4;
  bytes hash = 5;
}

message Tx {
  // body is the processable content of the transaction
  TxBody body = 1;

  // auth_info is the authorization related content of the transaction,
  // specifically signers, signer modes and fee
  AuthInfo auth_info = 2;

  // signatures is a list of signatures that matches the length and order of
  // AuthInfo's signer_infos to allow connecting signature meta information like
  // public key and signing mode by position.
  repeated bytes signatures = 3;
}

message TxBody {
  // messages is a list of messages to be executed. The required signers of
  // those messages define the number and order of elements in AuthInfo's
  // signer_infos and Tx's signatures. Each required signer address is added to
  // the list only the first time it occurs.
  // By convention, the first required signer (usually from the first message)
  // is referred to as the primary signer and pays the fee for the whole
  // transaction.
  repeated google.protobuf.Any messages = 1;

  // memo is any arbitrary note/comment to be added to the transaction.
  // WARNING: in clients, any publicly exposed text should not be called memo,
  // but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
  string memo = 2;

  // timeout is the block height after which this transaction will not
  // be processed by the chain
  uint64 timeout_height = 3;

  // extension_options are arbitrary options that can be added by chains
  // when the default options are not sufficient. If any of these are present
  // and can't be handled, the transaction will be rejected
  repeated google.protobuf.Any extension_options = 1023;

  // extension_options are arbitrary options that can be added by chains
  // when the default options are not sufficient. If any of these are present
  // and can't be handled, they will be ignored
  repeated google.protobuf.Any non_critical_extension_options = 2047;
}

message AuthInfo {
  // signer_infos defines the signing modes for the required signers. The number
  // and order of elements must match the required signers from TxBody's
  // messages. The first element is the primary signer and the one which pays
  // the fee.
  repeated SignerInfo signer_infos = 1;

  // Fee is the fee and gas limit for the transaction. The first signer is the
  // primary signer and the one which pays the fee. The fee can be calculated
  // based on the cost of evaluating the body and doing signature verification
  // of the signers. This can be estimated via simulation.
  Fee fee = 2;

  // Tip is the optional tip used for meta-transactions.
  //
  // Since: cosmos-sdk 0.46
  Tip tip = 3;
}

message SignerInfo {
  // public_key is the public key of the signer. It is optional for accounts
  // that already exist in state. If unset, the verifier can use the required \
  // signer address for this position and lookup the public key.
  google.protobuf.Any public_key = 1;

  // mode_info describes the signing mode of the signer and is a nested
  // structure to support nested multisig pubkey's
  ModeInfo mode_info = 2;

  // sequence is the sequence of the account, which describes the
  // number of committed transactions signed by a given address. It is used to
  // prevent replay attacks.
  uint64 sequence = 3;
}

message ModeInfo {
  // sum is the oneof that specifies whether this represents a single or nested
  // multisig signer
  oneof sum {
    // single represents a single signer
    ModeInfoSingle single = 1;

    // multi represents a nested multisig signer
    ModeInfoMulti multi = 2;
  }
}

// Single is the mode info for a single signer. It is structured as a message
// to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
// future
message ModeInfoSingle {
  // mode is the signing mode of the single signer
  SignMode mode = 1;
}

enum SignMode {
  // SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
  // rejected
  SIGN_MODE_UNSPECIFIED = 0;

  // SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
  // verified with raw bytes from Tx
  SIGN_MODE_DIRECT = 1;

  // SIGN_MODE_TEXTUAL is a future signing mode that will verify some
  // human-readable textual representation on top of the binary representation
  // from SIGN_MODE_DIRECT
  SIGN_MODE_TEXTUAL = 2;

  // SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
  // Amino JSON and will be removed in the future
  SIGN_MODE_LEGACY_AMINO_JSON = 127;
}

// Multi is the mode info for a multisig public key
message ModeInfoMulti {
  // bitarray specifies which keys within the multisig are signing
  CompactBitArray bitarray = 1;

  // mode_infos is the corresponding modes of the signers of the multisig
  // which could include nested multisig public keys
  repeated ModeInfo mode_infos = 2;
}

message CompactBitArray {
  option (gogoproto.goproto_stringer) = false;

  uint32 extra_bits_stored = 1;
  bytes elems = 2;
}

message Fee {
  // amount is the amount of coins to be paid as a fee
  repeated Coin amount = 1 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];

  // gas_limit is the maximum gas that can be used in transaction processing
  // before an out of gas error occurs
  uint64 gas_limit = 2;

  // if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
  // the payer must be a tx signer (and thus have signed this field in AuthInfo).
  // setting this field does *not* change the ordering of required signers for the transaction.
  string payer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
  // to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
  // not support fee grants, this will fail
  string granter = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message Coin {
  option (gogoproto.equal) = true;

  string denom = 1;
  string amount = 2 [(gogoproto.customtype) = "Int", (gogoproto.nullable) = false];
}

message Tip {
  // amount is the amount of the tip
  repeated Coin amount = 1 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // tipper is the address of the account paying for the tip
  string tipper = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message ResponseDeliverTx {
  uint32 code = 1;
  bytes data = 2;
  string log = 3;
  string info = 4;
  int64 gas_wanted = 5;
  int64 gas_used = 6;
  repeated Event events = 7 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "events,omitempty"];
  string codespace = 8;
}
